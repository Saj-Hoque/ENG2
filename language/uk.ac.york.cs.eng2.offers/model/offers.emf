@namespace(uri="http://cs.york.ac.uk/eng2/202425/offers", prefix="dis")
package offers;

class Offers {
	val Catalog catalog;
	val Rule[*] rules;
}

class Catalog {
	val Product[*] products;
	val Category[*] categories;
	val Tag[*] tags;
}

class Product {
	attr String name;
	attr Float price;
	ref Category[*]#products categories;
	ref Tag[*] tags;
}

class Category {
	attr String name;
	val Category[*] subcategories;
	ref Product[*]#categories products;
}

class Tag {
	attr String name;
}

class Rule {
	attr String name;
	attr String description;
	val Condition[*] conditions;
	val Action[*] actions;
	val Trigger[*] triggers;
}

abstract class Condition {
	attr String name;
}

class ProductOrderQuantityCondition extends Condition {
	ref Product product;
	attr Integer dailyOrders;
}

class ProductTagCondition extends Condition {
	ref Tag[*] tag;
	attr Integer minQuantity;
}

class MinimumOrderAmountCondition extends Condition {
	attr Float minAmount;
}

class DateCondition extends Condition {
	attr Integer month;
	attr Integer day;
}

class TagQuantity {
	attr String name;
	ref Tag[*] tags;
	attr Integer quantity;
}

abstract class Action {
	attr String name;
}

class BundlePriceAction extends Action {
	val TagQuantity[*] items;
	attr Float bundlePrice;
}

class PercentageDiscountPerProductAction extends Action {
	ref Product product;
	attr Float percentage;
}

class PercentageDiscountOnTaggedQuantityAction extends Action {
	val TagQuantity items;
	attr Float percentage;
}

class PercentageDiscountTotalAction extends Action {
	attr Float percentage;
}

class FixedDiscountAction extends Action {
	attr Float amount;
}

class Trigger {
	attr TriggerType type;
	ref Rule triggeredRule;
}

enum TriggerType {
	IF_MATCH = 0;
	IF_NOT_MATCH = 1;
	ALWAYS = 2;
}

